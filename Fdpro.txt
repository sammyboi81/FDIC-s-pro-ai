from flask import Flask, request, jsonify, send_file
import openai
import os
import xml.etree.ElementTree as ET
import re


app = Flask(__name__)


# OpenAI API Key (Set this in Render's environment variables)
openai.api_key = os.getenv("OPENAI_API_KEY")


# FDX Template file (You must upload this manually to Render)
TEMPLATE_FDX_PATH = "Rezvani.fdx"


def generate_script(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=1000
    )
    return response["choices"][0]["message"]["content"].strip()


def format_script(script_text):
    formatted_elements = []
    lines = script_text.split("\n")


    for i, line in enumerate(lines):
        line = line.strip()
        if re.match(r'^(INT\.|EXT\.)\s', line):
            formatted_elements.append(("Scene Heading", line))
        elif i < len(lines) - 1 and re.match(r'^[A-Z ]+$', line) and len(line) < 20:
            formatted_elements.append(("Character", line))
        elif formatted_elements and formatted_elements[-1][0] == "Character":
            formatted_elements.append(("Dialogue", line))
        else:
            formatted_elements.append(("Action", line))
    
    return formatted_elements


def create_fdx(script_text, output_fdx_path="generated_script.fdx"):
    try:
        tree = ET.parse(TEMPLATE_FDX_PATH)
        root = tree.getroot()
        content_section = root.find(".//Content")
        if content_section is None:
            raise ValueError("Error: No <Content> section found in FDX file.")


        content_section.clear()
        formatted_script = format_script(script_text)


        for element_type, text in formatted_script:
            paragraph = ET.Element("Paragraph")
            paragraph.set("Type", element_type)
            if element_type == "Character":
                paragraph.set("Alignment", "Center")
            elif element_type == "Dialogue":
                paragraph.set("Alignment", "Left")


            text_element = ET.SubElement(paragraph, "Text")
            text_element.text = text
            content_section.append(paragraph)


        tree.write(output_fdx_path, encoding="utf-8", xml_declaration=True)
        return output_fdx_path


    except Exception as e:
        return f"Error processing FDX file: {e}"


@app.route("/generate_script", methods=["POST"])
def generate_and_send_fdx():
    data = request.json
    prompt = data.get("prompt", "Write a short script.")
    script_text = generate_script(prompt)
    output_fdx = create_fdx(script_text, "generated_script.fdx")
    return send_file(output_fdx, as_attachment=True)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)